plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.5'
    id 'io.spring.dependency-management' version '1.1.3'
    id "com.palantir.docker" version "0.35.0"
    id "com.palantir.docker-run" version "0.35.0"
}

group = 'data.registry.cars'
version = '1.0.0'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    runtimeOnly 'org.postgresql:postgresql'
    runtimeOnly 'com.h2database:h2'
    //default spring doc url http://localhost:8080/swagger-ui/index.html
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.4'

}

tasks.named('bootBuildImage') {
    builder = 'paketobuildpacks/builder-jammy-base:latest'
}

tasks.named('test') {
    useJUnitPlatform()
}


task dockerLogin(type: Exec) {
    description = 'Login into Docker Registry'
    
    def loginToken = System.getenv("docker_login_password")
    def loginName = System.getenv("docker_login_name")

    Properties properties = new Properties()
    def propertiesFile = project.rootProject.file('.env')
    if (propertiesFile.exists()) {
        properties.load(propertiesFile.newDataInputStream())
        loginToken = properties.getProperty('docker_login_password') ?: loginToken
        loginName = properties.getProperty('docker_login_name') ?: loginName
    }

    group = 'Docker'
    commandLine "docker"
    standardInput = new ByteArrayInputStream(loginToken.getBytes())
    args "login", "--username", loginName, "--password-stdin", ""
}

dockerPrepare.dependsOn bootJar

docker {
    Properties properties = new Properties()
    def loginName = System.getenv("docker_login_name")
    def propertiesFile = project.rootProject.file('.env')
    if (propertiesFile.exists()) {
        properties.load(propertiesFile.newDataInputStream())
        loginName = properties.getProperty('docker_login_name') ?: loginName
    }
    def fileName = 'car-owners-registry-backend'
    
    name "${loginName}/${fileName}:${project.version}"    
    files "./build/libs/${fileName}-${project.version}.jar"
    tag 'DockerHub', "${loginName}/${fileName}:latest"
    
    dockerfile file('./docker/Dockerfile') 
}
dockerRun {
    name "${project.name}"
    image "${project.name}:${project.version}"
    ports '8080:8080'
    clean true
}